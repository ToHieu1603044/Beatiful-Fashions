import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Modal } from 'react-bootstrap';

const CountDown: React.FC = () => {
  const [showCountdown, setShowCountdown] = useState(true); // Lu√¥n hi·ªÉn th·ªã popup khi t·∫£i trang
  const [countdownTime, setCountdownTime] = useState('');
  const [countdownInterval, setCountdownInterval] = useState<NodeJS.Timeout | null>(null);
  const [saleTitle, setSaleTitle] = useState('Flash Sale');
  const [endTime, setEndTime] = useState<Date | null>(null);

  useEffect(() => {
    const fetchFlashSale = async () => {
      try {
        const response = await axios.get('http://127.0.0.1:8000/api/count-down');
        const sales = response.data;
        console.log(sales);
        const now = new Date();

        // Ki·ªÉm tra xem c√≥ khuy·∫øn m√£i n√†o ƒëang di·ªÖn ra
        const activeSale = sales.find((sale: any) => {
          const start = new Date(sale.start_time);
          const end = new Date(sale.end_time);
          return now >= start && now <= end && sale.status === 'active';  // Khuy·∫øn m√£i ƒëang di·ªÖn ra
        });

        if (activeSale) {
          setSaleTitle(activeSale.name || 'Flash Sale');
          setEndTime(new Date(activeSale.end_time)); // L·∫•y th·ªùi gian k·∫øt th√∫c khuy·∫øn m√£i
        } else {
          // N·∫øu kh√¥ng c√≥ khuy·∫øn m√£i, ƒë·∫∑t th·ªùi gian ƒë·∫øm ng∆∞·ª£c m·∫∑c ƒë·ªãnh l√† 5 ph√∫t t·ª´ hi·ªán t·∫°i
          const defaultEndTime = new Date(now.getTime() + 5 * 60 * 1000);
          setEndTime(defaultEndTime);
        }
      } catch (error) {
        console.error('L·ªói khi l·∫•y flash sale:', error);
        // Trong tr∆∞·ªùng h·ª£p l·ªói, c≈©ng ƒë·∫∑t th·ªùi gian ƒë·∫øm ng∆∞·ª£c m·∫∑c ƒë·ªãnh
        const defaultEndTime = new Date(new Date().getTime() + 5 * 60 * 1000);
        setEndTime(defaultEndTime);
      }
    };

    fetchFlashSale();
  }, []);

  useEffect(() => {
    if (endTime) {
      startCountdown(endTime); // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c khi c√≥ th·ªùi gian k·∫øt th√∫c
    }

    return () => {
      if (countdownInterval) {
        clearInterval(countdownInterval);
      }
    };
  }, [endTime]);

  const startCountdown = (endTime: Date) => {
    if (countdownInterval) {
      clearInterval(countdownInterval); // D·ªçn d·∫πp interval c≈© n·∫øu c√≥
    }

    const interval = setInterval(() => {
      const now = new Date().getTime();
      const distance = endTime.getTime() - now;

      if (distance < 0) {
        clearInterval(interval);
        setCountdownTime('ƒê√£ k·∫øt th√∫c!');
        setTimeout(() => setShowCountdown(false), 2000); // T·ª± ƒë·ªông ·∫©n popup sau 2 gi√¢y khi k·∫øt th√∫c
        return;
      }

      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);
      const days = Math.floor(distance / (1000 * 60 * 60 * 24));

      setCountdownTime(`${days}d ${hours}h ${minutes}m ${seconds}s`);
    }, 1000);

    setCountdownInterval(interval); // L∆∞u l·∫°i interval ƒë·ªÉ c√≥ th·ªÉ d·ªçn d·∫πp sau n√†y
  };

  const formatDate = (date: Date) => {
    const options: Intl.DateTimeFormatOptions = {
      weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',
    };
    return date.toLocaleDateString('vi-VN', options);
  };

  return (
    <Modal
      show={showCountdown}
      onHide={() => setShowCountdown(false)}
      centered
      size="lg" // ƒê·∫∑t k√≠ch th∆∞·ªõc modal l·ªõn h∆°n
      aria-labelledby="contained-modal-title-vcenter"
    >
      <Modal.Header closeButton>
        <Modal.Title id="contained-modal-title-vcenter" className="text-warning fw-bold fs-3">
          üî• {saleTitle}
        </Modal.Title>
      </Modal.Header>
      <Modal.Body className="text-center">
        <h5 className="text-muted">Th·ªùi gian c√≤n l·∫°i:</h5>
        <h2 className="text-danger fw-bold fs-1">{countdownTime}</h2>
        {endTime && (
          <p className="text-secondary mt-4">
            Khuy·∫øn m√£i k·∫øt th√∫c v√†o: <strong>{formatDate(endTime)}</strong>
          </p>
        )}
        <p className="text-secondary mt-4">Ch√∫ng t√¥i c√≥ c√°c s·∫£n ph·∫©m ∆∞u ƒë√£i h·∫•p d·∫´n ch·ªâ trong th·ªùi gian ng·∫Øn. ƒê·ª´ng b·ªè l·ª° c∆° h·ªôi n√†y!</p>
      </Modal.Body>
    </Modal>
  );
};

export default CountDown;
